[
    {
        "prompt": "What is the purpose of the ScriptCreatorGraph class in scrapegraph ai?",
        "answer": "The `ScriptCreatorGraph` class in scrapegraph ai is a scraping pipeline that generates web scraping scripts based on a user prompt and the source URL or local directory."
    },
    {
        "prompt": "What are the main attributes of the ScriptCreatorGraph class in scrapegraph ai?",
        "answer": "The main attributes of the `ScriptCreatorGraph` class in scrapegraph ai are inherited from the `AbstractGraph` class, such as `prompt`, `config`, `source`, and `schema`. Additionally, it has the `input_key` attribute, which is either 'url' or 'local_dir' based on the source, and the `library` attribute, which is the web scraping library to be used for generating the script."
    },
    {
        "prompt": "What is the role of the _create_graph method in the ScriptCreatorGraph class of scrapegraph ai?",
        "answer": "The _create_graph method in the `ScriptCreatorGraph` class of scrapegraph ai is responsible for creating the graph of nodes representing the workflow for generating web scraping scripts. It includes nodes for fetching the web page or local data, parsing it, and generating the script with the GenerateScraperNode."
    },
    {
        "prompt": "What does the run method in the ScriptCreatorGraph class of scrapegraph ai do?",
        "answer": "The `run` method in the `ScriptCreatorGraph` class of scrapegraph ai executes the web scraping script generation process by providing the initial inputs to the graph and calling the graph's execute method. It then stores the final state and execution info and returns the generated script as the answer to the prompt."
    },
    {
        "prompt": "How does the ScriptCreatorGraph class in scrapegraph ai handle web pages and local directories?",
        "answer": "The `ScriptCreatorGraph` class in scrapegraph ai determines the `input_key` attribute based on the source. If the source starts with 'http', the `input_key` is set to 'url', and if not, it is set to 'local_dir'. This `input_key` is then used to provide the correct input to the graph's fetch node."
    },
    {
        "prompt": "Can you show me the implementation of the ScriptCreatorGraph from scrapegraphai?",
        "answer": "Sure, here's the implementation for the `ScriptCreatorGraph` class in ScrapeGraphAI:\n\"\"\"\nScriptCreatorGraph Module\n\"\"\"\n\nfrom typing import Optional\n\nfrom .base_graph import BaseGraph\nfrom .abstract_graph import AbstractGraph\n\nfrom ..nodes import (\n    FetchNode,\n    ParseNode,\n    GenerateScraperNode\n)\n\n\nclass ScriptCreatorGraph(AbstractGraph):\n    \"\"\"\n    ScriptCreatorGraph defines a scraping pipeline for generating web scraping scripts.\n\n    Attributes:\n        prompt (str): The prompt for the graph.\n        source (str): The source of the graph.\n        config (dict): Configuration parameters for the graph.\n        schema (str): The schema for the graph output.\n        llm_model: An instance of a language model client, configured for generating answers.\n        embedder_model: An instance of an embedding model client, \n        configured for generating embeddings.\n        verbose (bool): A flag indicating whether to show print statements during execution.\n        headless (bool): A flag indicating whether to run the graph in headless mode.\n        model_token (int): The token limit for the language model.\n        library (str): The library used for web scraping.\n\n    Args:\n        prompt (str): The prompt for the graph.\n        source (str): The source of the graph.\n        config (dict): Configuration parameters for the graph.\n        schema (str): The schema for the graph output.\n\n    Example:\n        >>> script_creator = ScriptCreatorGraph(\n        ...     \"List me all the attractions in Chioggia.\",\n        ...     \"https://en.wikipedia.org/wiki/Chioggia\",\n        ...     {\"llm\": {\"model\": \"gpt-3.5-turbo\"}}\n        ... )\n        >>> result = script_creator.run()\n    \"\"\"\n\n    def __init__(self, prompt: str, source: str, config: dict, schema: Optional[str] = None):\n\n        self.library = config['library']\n\n        super().__init__(prompt, config, source, schema)\n\n        self.input_key = \"url\" if source.startswith(\"http\") else \"local_dir\"\n\n    def _create_graph(self) -> BaseGraph:\n        \"\"\"\n        Creates the graph of nodes representing the workflow for web scraping.\n\n        Returns:\n            BaseGraph: A graph instance representing the web scraping workflow.\n        \"\"\"\n\n        fetch_node = FetchNode(\n            input=\"url | local_dir\",\n            output=[\"doc\", \"link_urls\", \"img_urls\"],\n        )\n        parse_node = ParseNode(\n            input=\"doc\",\n            output=[\"parsed_doc\"],\n            node_config={\"chunk_size\": self.model_token,\n                         \"parse_html\": False\n                         }\n        )\n        generate_scraper_node = GenerateScraperNode(\n            input=\"user_prompt & (doc)\",\n            output=[\"answer\"],\n            node_config={\n                \"llm_model\": self.llm_model,\n                \"schema\": self.schema,\n            },\n            library=self.library,\n            website=self.source\n        )\n\n        return BaseGraph(\n            nodes=[\n                fetch_node,\n                parse_node,\n                generate_scraper_node,\n            ],\n            edges=[\n                (fetch_node, parse_node),\n                (parse_node, generate_scraper_node),\n            ],\n            entry_point=fetch_node\n        )\n\n    def run(self) -> str:\n        \"\"\"\n        Executes the web scraping process and returns the answer to the prompt.\n\n        Returns:\n            str: The answer to the prompt.\n        \"\"\"\n\n        inputs = {\"user_prompt\": self.prompt, self.input_key: self.source}\n        self.final_state, self.execution_info = self.graph.execute(inputs)\n\n        return self.final_state.get(\"answer\", \"No answer found \")\n```python\n\n```"
    }
]