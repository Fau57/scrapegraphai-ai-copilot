[
    {
        "prompt": "What is the purpose of the OmniSearchGraph class in scrapegraph ai?",
        "answer": "The `OmniSearchGraph` class in scrapegraph ai is a scraping pipeline that searches the internet for answers to a given prompt. It only requires a user prompt to search the internet and generate an answer."
    },
    {
        "prompt": "What are the main attributes of the OmniSearchGraph class in scrapegraph ai?",
        "answer": "The main attributes of the `OmniSearchGraph` class in scrapegraph ai are inherited from the `AbstractGraph` class, such as `prompt`, `config`, and `schema`. Additionally, it has the `copy_config` attribute, which is a copy of the configuration, and the `max_results` attribute, which determines the maximum number of results to return."
    },
    {
        "prompt": "What is the role of the _create_graph method in the OmniSearchGraph class of scrapegraph ai?",
        "answer": "The `_create_graph` method in the `OmniSearchGraph` class of scrapegraph ai is responsible for creating the graph of nodes representing the workflow for web scraping and searching. It includes nodes for searching the internet with the SearchInternetNode, iterating through the results with the GraphIteratorNode using an instance of OmniScraperGraph, and merging the answers with the MergeAnswersNode."
    },
    {
        "prompt": "What does the run method in the OmniSearchGraph class of scrapegraph ai do?",
        "answer": "The run method in the `OmniSearchGraph` class of scrapegraph ai executes the web scraping and searching process by providing the initial inputs to the graph and calling the graph's execute method. It then stores the final state and execution info and returns the answer to the prompt."
    },
    {
        "prompt": "How does the OmniSearchGraph class in scrapegraph ai use the OmniScraperGraph class?",
        "answer": "The `OmniSearchGraph` class in scrapegraph ai creates an instance of the OmniScraperGraph class and uses it in the GraphIteratorNode node. The GraphIteratorNode node iterates through the search results and executes the OmniScraperGraph instance for each result to extract relevant information."
    },
    {
        "prompt": "How is the OmniSearchGraph class implemented in scrapegraph AI?",
        "answer": "The `OmniSearchGraph` class in scrapegraph ai is implemented like this:\n\n```python\n\"\"\" \nOmniSearchGraph Module\n\"\"\"\n\nfrom copy import copy, deepcopy\nfrom typing import Optional\n\nfrom .base_graph import BaseGraph\nfrom .abstract_graph import AbstractGraph\nfrom .omni_scraper_graph import OmniScraperGraph\n\nfrom ..nodes import (\n    SearchInternetNode,\n    GraphIteratorNode,\n    MergeAnswersNode\n)\n\n\nclass OmniSearchGraph(AbstractGraph):\n    \"\"\" \n    OmniSearchGraph is a scraping pipeline that searches the internet for answers to a given prompt.\n    It only requires a user prompt to search the internet and generate an answer.\n\n    Attributes:\n        prompt (str): The user prompt to search the internet.\n        llm_model (dict): The configuration for the language model.\n        embedder_model (dict): The configuration for the embedder model.\n        headless (bool): A flag to run the browser in headless mode.\n        verbose (bool): A flag to display the execution information.\n        model_token (int): The token limit for the language model.\n        max_results (int): The maximum number of results to return.\n\n    Args:\n        prompt (str): The user prompt to search the internet.\n        config (dict): Configuration parameters for the graph.\n        schema (Optional[str]): The schema for the graph output.\n\n    Example:\n        >>> omni_search_graph = OmniSearchGraph(\n        ...     \"What is Chioggia famous for?\",\n        ...     {\"llm\": {\"model\": \"gpt-4o\"}}\n        ... )\n        >>> result = search_graph.run()\n    \"\"\"\n\n    def __init__(self, prompt: str, config: dict, schema: Optional[str] = None):\n\n        self.max_results = config.get(\"max_results\", 3)\n\n        if all(isinstance(value, str) for value in config.values()):\n            self.copy_config = copy(config)\n        else:\n            self.copy_config = deepcopy(config)\n\n        super().__init__(prompt, config, schema)\n\n    def _create_graph(self) -> BaseGraph:\n        \"\"\"\n        Creates the graph of nodes representing the workflow for web scraping and searching.\n\n        Returns:\n            BaseGraph: A graph instance representing the web scraping and searching workflow.\n        \"\"\"\n\n        # ************************************************\n        # Create a OmniScraperGraph instance\n        # ************************************************\n\n        omni_scraper_instance = OmniScraperGraph(\n            prompt=\"\",\n            source=\"\",\n            config=self.copy_config\n        )\n\n        # ************************************************\n        # Define the graph nodes\n        # ************************************************\n\n        search_internet_node = SearchInternetNode(\n            input=\"user_prompt\",\n            output=[\"urls\"],\n            node_config={\n                \"llm_model\": self.llm_model,\n                \"max_results\": self.max_results\n            }\n        )\n        graph_iterator_node = GraphIteratorNode(\n            input=\"user_prompt & urls\",\n            output=[\"results\"],\n            node_config={\n                \"graph_instance\": omni_scraper_instance,\n            }\n        )\n\n        merge_answers_node = MergeAnswersNode(\n            input=\"user_prompt & results\",\n            output=[\"answer\"],\n            node_config={\n                \"llm_model\": self.llm_model,\n                \"schema\": self.schema\n            }\n        )\n\n        return BaseGraph(\n            nodes=[\n                search_internet_node,\n                graph_iterator_node,\n                merge_answers_node\n            ],\n            edges=[\n                (search_internet_node, graph_iterator_node),\n                (graph_iterator_node, merge_answers_node)\n            ],\n            entry_point=search_internet_node\n        )\n\n    def run(self) -> str:\n        \"\"\"\n        Executes the web scraping and searching process.\n\n        Returns:\n            str: The answer to the prompt.\n        \"\"\"\n        inputs = {\"user_prompt\": self.prompt}\n        self.final_state, self.execution_info = self.graph.execute(inputs)\n\n        return self.final_state.get(\"answer\", \"No answer found.\")\n```"
    }
]
  