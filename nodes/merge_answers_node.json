[
    {
        "prompt": "What is the purpose of the MergeAnswersNode class in Scrapegraph AI?",
        "answer": "The purpose of the `MergeAnswersNode` class in Scrapegraph AI is to merge the answers from multiple graph instances into a single answer."
    },
    {
        "prompt": "What are the attributes of the MergeAnswersNode class in Scrapegraph AI?",
        "answer": "The `MergeAnswersNode` class in Scrapegraph AI has two attributes: `llm_model`, which is an instance of a language model client configured for generating answers, and `verbose`, which is a boolean flag indicating whether to show print statements during execution."
    },
    {
        "prompt": "What does the execute method of the MergeAnswersNode class in Scrapegraph AI do?",
        "answer": "The `execute` method of the `MergeAnswersNode` class in Scrapegraph AI executes the node's logic to merge the answers from multiple graph instances into a single answer. The method retrieves the user's prompt and the list of answers from the state, merges the answers into a single string, and generates the final answer using a language model."
    },
    {
        "prompt": "What happens if the input keys are not found in the state passed to the execute method of the MergeAnswersNode class in Scrapegraph AI?",
        "answer": "If the input keys are not found in the state passed to the `execute` method of the `MergeAnswersNode` class in Scrapegraph AI, a KeyError is raised, indicating that the necessary information for generating an answer is missing."
    },
    {
        "prompt": "What is the purpose of the JsonOutputParser class in the MergeAnswersNode class in Scrapegraph AI?",
        "answer": "The `JsonOutputParser` class is used in the `MergeAnswersNode` class in Scrapegraph AI to parse the response of the language model and extract the generated answer in the correct JSON format."
    },
    {
        "prompt": "Show me the implementation of the MergeAnswersNode class in Scrapegraph AI.",
        "answer": "Sure, here's the implementation of the `MergeAnswersNode` class in Scrapegraph AI:\n\n```python\n\"\"\"\nMergeAnswersNode Module\n\"\"\"\n\n# Imports from standard library\nfrom typing import List, Optional\nfrom tqdm import tqdm\n\n# Imports from Langchain\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom tqdm import tqdm\n\nfrom ..utils.logging import get_logger\n\n# Imports from the library\nfrom .base_node import BaseNode\n\n\nclass MergeAnswersNode(BaseNode):\n    \"\"\"\n    A node responsible for merging the answers from multiple graph instances into a single answer.\n\n    Attributes:\n        llm_model: An instance of a language model client, configured for generating answers.\n        verbose (bool): A flag indicating whether to show print statements during execution.\n\n    Args:\n        input (str): Boolean expression defining the input keys needed from the state.\n        output (List[str]): List of output keys to be updated in the state.\n        node_config (dict): Additional configuration for the node.\n        node_name (str): The unique identifier name for the node, defaulting to \"GenerateAnswer\".\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        output: List[str],\n        node_config: Optional[dict] = None,\n        node_name: str = \"MergeAnswers\",\n    ):\n        super().__init__(node_name, \"node\", input, output, 2, node_config)\n\n        self.llm_model = node_config[\"llm_model\"]\n        self.verbose = (\n            False if node_config is None else node_config.get(\"verbose\", False)\n        )\n\n    def execute(self, state: dict) -> dict:\n        \"\"\"\n        Executes the node's logic to merge the answers from multiple graph instances into a\n        single answer.\n\n        Args:\n            state (dict): The current state of the graph. The input keys will be used\n                            to fetch the correct data from the state.\n\n        Returns:\n            dict: The updated state with the output key containing the generated answer.\n\n        Raises:\n            KeyError: If the input keys are not found in the state, indicating\n                      that the necessary information for generating an answer is missing.\n        \"\"\"\n\n        self.logger.info(f\"--- Executing {self.node_name} Node ---\")\n\n        # Interpret input keys based on the provided input expression\n        input_keys = self.get_input_keys(state)\n\n        # Fetching data from the state based on the input keys\n        input_data = [state[key] for key in input_keys]\n\n        user_prompt = input_data[0]\n        answers = input_data[1]\n\n        # merge the answers in one string\n        answers_str = \"\"\n        for i, answer in enumerate(answers):\n            answers_str += f\"CONTENT WEBSITE {i+1}: {answer}\\n\"\n\n        output_parser = JsonOutputParser()\n        format_instructions = output_parser.get_format_instructions()\n\n        template_merge = \"\"\"\n        You are a website scraper and you have just scraped some content from multiple websites.\\n\n        You are now asked to provide an answer to a USER PROMPT based on the content you have scraped.\\n\n        You need to merge the content from the different websites into a single answer without repetitions (if there are any). \\n\n        The scraped contents are in a JSON format and you need to merge them based on the context and providing a correct JSON structure.\\n\n        OUTPUT INSTRUCTIONS: {format_instructions}\\n\n        You must format the output with the following schema, if not None:\\n\n        SCHEMA: {schema}\\n\n        USER PROMPT: {user_prompt}\\n\n        WEBSITE CONTENT: {website_content}\n        \"\"\"\n\n        prompt_template = PromptTemplate(\n            template=template_merge,\n            input_variables=[\"user_prompt\"],\n            partial_variables={\n                \"format_instructions\": format_instructions,\n                \"website_content\": answers_str,\n                \"schema\": self.node_config.get(\"schema\", None),\n            },\n        )\n\n        merge_chain = prompt_template | self.llm_model | output_parser\n        answer = merge_chain.invoke({\"user_prompt\": user_prompt})\n\n        # Update the state with the generated answer\n        state.update({self.output[0]: answer})\n        return state\n```"
    }
  ]
  