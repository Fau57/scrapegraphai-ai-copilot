[
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt using groq and ollama as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SmartScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\nload_dotenv()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngroq_key = os.getenv(\"GROQ_APIKEY\")\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"groq/gemma-7b-it\",\n        \"api_key\": groq_key,\n        \"temperature\": 0\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily\n    },\n    \"headless\": False\n}\n\n# ************************************************\n# Create the SmartScraperGraph instance and run it\n# ************************************************\n\nsmart_scraper_graph = SmartScraperGraph(\n    prompt=\"List me all the projects with their description.\",\n    # also accepts a string with the already downloaded HTML code\n    source=\"https://perinim.github.io/projects/\",\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and a schema using groq and openai as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SearchGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\nload_dotenv()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngroq_key = os.getenv(\"GROQ_APIKEY\")\nopenai_key = os.getenv(\"OPENAI_APIKEY\")\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"groq/gemma-7b-it\",\n        \"api_key\": groq_key,\n        \"temperature\": 0\n    },\n    \"embeddings\": {\n        \"api_key\": openai_key,\n        \"model\": \"openai\",\n    },\n    \"headless\": False\n}\n\nsearch_graph = SearchGraph(\n    prompt=\"List me the best escursions near Trento\",\n    config=graph_config\n)\n\nresult = search_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = search_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    },
   {
        "prompt": "How to create a script in Scrapegraphai for the searchgraph using ollama and groq?",
        "answer": "Example of Search Graph\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SearchGraph\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info\nload_dotenv()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngroq_key = os.getenv(\"GROQ_APIKEY\")\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"groq/gemma-7b-it\",\n        \"api_key\": groq_key,\n        \"temperature\": 0\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily\n    },\n    \"max_results\": 2,\n    \"verbose\": True\n}\n\n# ************************************************\n# Create the SearchGraph instance and run it\n# ************************************************\n\nsearch_graph = SearchGraph(\n    prompt=\"List me all the regions of Italy.\",\n    config=graph_config\n)\n\nresult = search_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = search_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n\n# Save to json and csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")"
    }
]
