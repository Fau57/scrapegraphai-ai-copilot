[
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt using haiku (anthopic) as a provider?",
        "answer": "\"\"\"\nExample of Search Graph\n\"\"\"\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SearchGraph\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json\nload_dotenv()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngemini_key = os.getenv(\"GOOGLE_APIKEY\")\n\ngraph_config = {\n    \"llm\": {\n        \"api_key\": gemini_key,\n        \"model\": \"gemini-pro\",\n        \"temperature\": 0,\n        \"streaming\": True\n    },\n    \"max_results\": 5,\n    \"verbose\": True,\n}\n\n# ************************************************\n# Create the SearchGraph instance and run it\n# ************************************************\n\nsearch_graph = SearchGraph(\n    prompt=\"List me all the regions of Italy.\",\n    config=graph_config\n)\n\nresult = search_graph.run()\nprint(result)\n\n# Save to json and csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and a schema using haiku (anthopic) as a provider?",
        "answer": "\"\"\"\nBasic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\"\"\"\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SmartScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\nfrom langchain_community.llms import HuggingFaceEndpoint\nfrom langchain_community.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n# required environment variables in .env\n# HUGGINGFACEHUB_API_TOKEN\n# ANTHROPIC_API_KEY\nload_dotenv()\n\nHUGGINGFACEHUB_API_TOKEN = os.getenv('HUGGINGFACEHUB_API_TOKEN')\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nembedder_model_instance = HuggingFaceInferenceAPIEmbeddings(\n    api_key=HUGGINGFACEHUB_API_TOKEN, model_name=\"sentence-transformers/all-MiniLM-l6-v2\"\n)\n\n# ************************************************\n# Define the output schema for the graph\n# ************************************************\n\nschema = \"\"\"\n{\n    \"Projects\": [\n        {\n            \"title\": \"...\",\n            \"description\": \"...\"\n        },\n        {\n            \"title\": \"...\",\n            \"description\": \"...\"\n        }\n    ]\n}\n\"\"\"\n\n# ************************************************\n# Create the SmartScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\n        \"api_key\": os.getenv(\"ANTHROPIC_API_KEY\"),\n        \"model\": \"claude-3-haiku-20240307\",\n        \"max_tokens\": 4000\n    },\n    \"embeddings\": {\n        \"model_instance\": embedder_model_instance\n    }\n}\n\nsmart_scraper_graph = SmartScraperGraph(\n    prompt=\"List me all the projects with their description\",\n    schema=schema,\n    source=\"https://perinim.github.io/projects/\",\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    }
]
