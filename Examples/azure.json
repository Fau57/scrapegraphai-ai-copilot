[
     {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt using azure as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\n```python\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.graphs import SmartScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\n# required environment variable in .env\n# AZURE_OPENAI_ENDPOINT\n# AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\n# MODEL_NAME\n# AZURE_OPENAI_API_KEY\n# OPENAI_API_TYPE\n# AZURE_OPENAI_API_VERSION\n# AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\nload_dotenv()\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\n\n# ************************************************\n# Create the SmartScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsmart_scraper_graph = SmartScraperGraph(\n    prompt=\"\"\"List me all the events, with the following fields: company_name, event_name, event_start_date, event_start_time, event_end_date, event_end_time, location, event_mode, event_category, third_party_redirect, no_of_days, time_in_hours, hosted_or_attending, refreshments_type, registration_available, registration_link\"\"\",\n    source=\"https://www.hmhco.com/event\",\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n```\n"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and a schema using azure as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper with schema import os, json from dotenv import load_dotenv from langchain_openai import AzureChatOpenAI from langchain_openai import AzureOpenAIEmbeddings from scrapegraphai.graphs import SmartScraperGraph load_dotenv() # ************************************************ # Define the output schema for the graph # ************************************************ schema= \"\"\" { \"Projects\": [ \"Project #\": { \"title\": \"...\", \"description\": \"...\", }, \"Project #\": { \"title\": \"...\", \"description\": \"...\", } ] } \"\"\" # ************************************************ # Initialize the model instances # ************************************************ llm_model_instance = AzureChatOpenAI( openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"] ) embedder_model_instance = AzureOpenAIEmbeddings( azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"], openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"] ) # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ graph_config = { \"llm\": {\"model_instance\": llm_model_instance}, \"embeddings\": {\"model_instance\": embedder_model_instance} } # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ smart_scraper_graph = SmartScraperGraph( prompt=\"List me all the projects with their description\", source=\"https://perinim.github.io/projects/\", schema=schema, config=graph_config ) result = smart_scraper_graph.run() print(json.dumps(result, indent=4))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and searching on the internet using azure as a provider?",
        "answer": ""
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple websites given a prompt using azure as a provider?",
        "answer": ""
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping an XML given a prompt using azure as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\n```python\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.graphs import XMLScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\n# required environment variable in .env\n# AZURE_OPENAI_ENDPOINT\n# AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\n# MODEL_NAME\n# AZURE_OPENAI_API_KEY\n# OPENAI_API_TYPE\n# AZURE_OPENAI_API_VERSION\n# AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\nload_dotenv()\n\nFILE_NAME = \"inputs/books.xml\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\n\n# ************************************************\n# Create the XMLScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsmart_scraper_graph = XMLScraperGraph(\n    prompt=\"List me all the authors, title and genres of the books\",\n    source=text,  # Pass the content of the file, not the file object\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n```\n"
    },
      {
        "prompt": "How to create a script in Scrapegraphai for scraping a JSON given a prompt using azure as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\n```python\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.graphs import JSONScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\n# required environment variable in .env\n# AZURE_OPENAI_ENDPOINT\n# AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\n# MODEL_NAME\n# AZURE_OPENAI_API_KEY\n# OPENAI_API_TYPE\n# AZURE_OPENAI_API_VERSION\n# AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\nload_dotenv()\n\nFILE_NAME = \"inputs/example.json\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n)\n\n# ************************************************\n# Create the JSONScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsmart_scraper_graph = JSONScraperGraph(\n    prompt=\"List me all the authors, title and genres of the books\",\n    source=text,  # Pass the content of the file, not the file object\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n```\n"
    },
   {
        "prompt": "How to create a script in Scrapegraphai for scraping a CSV given a prompt using azure as a provider?",
        "answer": "Basic example of scraping pipeline using CSVScraperGraph from CSV documents import os from dotenv import load_dotenv import pandas as pd from langchain_openai import AzureChatOpenAI from langchain_openai import AzureOpenAIEmbeddings from scrapegraphai.graphs import CSVScraperGraph from scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info load_dotenv() # ************************************************ # Read the CSV file # ************************************************ FILE_NAME = \"inputs/username.csv\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) text = pd.read_csv(file_path) # ************************************************ # Define the configuration for the graph # ************************************************ llm_model_instance = AzureChatOpenAI( openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"] ) embedder_model_instance = AzureOpenAIEmbeddings( azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"], openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"] ) # ************************************************ # Create the JSONScraperGraph instance and run it # ************************************************ graph_config = { \"llm\": {\"model_instance\": llm_model_instance}, \"embeddings\": {\"model_instance\": embedder_model_instance} } # ************************************************ # Create the CSVScraperGraph instance and run it # ************************************************ csv_scraper_graph = CSVScraperGraph( prompt=\"List me all the last names\", source=str(text), # Pass the content of the file, not the file object config=graph_config ) result = csv_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = csv_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info)) # Save to json or csv convert_to_csv(result, \"result\") convert_to_json(result, \"result\")"
    }, 
  {
        "prompt": "How to create a script in Scrapegraphai for scraping plain text given a prompt using azure as a provider?",
        "answer": "Basic example of scraping pipeline using SmartScraper from text import os from dotenv import load_dotenv from scrapegraphai.graphs import SmartScraperGraph from langchain_openai import AzureChatOpenAI from langchain_openai import AzureOpenAIEmbeddings from scrapegraphai.utils import prettify_exec_info load_dotenv() # ************************************************ # Read the text file # ************************************************ FILE_NAME = \"inputs/plain_html_example.txt\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) # It could be also a http request using the request model with open(file_path, 'r', encoding=\"utf-8\") as file: text = file.read() # ************************************************ # Define the configuration for the graph # ************************************************ llm_model_instance = AzureChatOpenAI( openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"] ) embedder_model_instance = AzureOpenAIEmbeddings( azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"], openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"] ) # ************************************************ # Create the JSONScraperGraph instance and run it # ************************************************ graph_config = { \"llm\": {\"model_instance\": llm_model_instance}, \"embeddings\": {\"model_instance\": embedder_model_instance} } # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ smart_scraper_graph = SmartScraperGraph( prompt=\"List me all the projects with their description.\", source=text, config=graph_config ) result = smart_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = smart_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info))"
    },
   {
        "prompt": "How to create a script in Scrapegraphai for scraping a PDF given a prompt using azure as a provider?",
        "answer": "import os, json\nfrom dotenv import load_dotenv\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.graphs import PDFScraperGraph\n\nload_dotenv()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsource = \"\"\"\n    The Divine Comedy, Italian La Divina Commedia, original name La commedia, long narrative poem written in Italian \n    circa 1308/21 by Dante. It is usually held to be one of the world s great works of literature. \n    Divided into three major sections—Inferno, Purgatorio, and Paradiso—the narrative traces the journey of Dante \n    from darkness and error to the revelation of the divine light, culminating in the Beatific Vision of God. \n    Dante is guided by the Roman poet Virgil, who represents the epitome of human knowledge, from the dark wood \n    through the descending circles of the pit of Hell (Inferno). He then climbs the mountain of Purgatory, guided \n    by the Roman poet Statius, who represents the fulfilment of human knowledge, and is finally led by his lifelong love, \n    the Beatrice of his earlier poetry, through the celestial spheres of Paradise.\n\"\"\"\n\nschema = \"\"\"\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"summary\": {\n                \"type\": \"string\"\n            },\n            \"topics\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n\"\"\"\n\npdf_scraper_graph = PDFScraperGraph(\n    prompt=\"Summarize the text and find the main topics\",\n    source=source,\n    config=graph_config,\n    schema=schema\n)\nresult = pdf_scraper_graph.run()\n\nprint(json.dumps(result, indent=4))"
    },
   {
        "prompt": "How to create a script in Scrapegraphai a custom graph using azure as a provider?",
        "answer": "Example of custom graph using existing nodes import os from dotenv import load_dotenv from langchain_openai import OpenAIEmbeddings from langchain_openai import AzureChatOpenAI from langchain_openai import AzureOpenAIEmbeddings from scrapegraphai.graphs import BaseGraph from scrapegraphai.nodes import FetchNode, ParseNode, RAGNode, GenerateAnswerNode, RobotsNode load_dotenv() # ************************************************ # Define the configuration for the graph # ************************************************ # ************************************************ # Define the configuration for the graph # ************************************************ llm_model_instance = AzureChatOpenAI( openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"] ) embedder_model_instance = AzureOpenAIEmbeddings( azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"], openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"] ) # ************************************************ # Create the JSONScraperGraph instance and run it # ************************************************ graph_config = { \"llm\": {\"model_instance\": llm_model_instance}, \"embeddings\": {\"model_instance\": embedder_model_instance} } # define the nodes for the graph robot_node = RobotsNode( input=\"url\", output=[\"is_scrapable\"], node_config={ \"llm_model\": llm_model_instance, \"force_scraping\": True, \"verbose\": True, } ) fetch_node = FetchNode( input=\"url | local_dir\", output=[\"doc\", \"link_urls\", \"img_urls\"], node_config={ \"verbose\": True, \"headless\": True, } ) parse_node = ParseNode( input=\"doc\", output=[\"parsed_doc\"], node_config={ \"chunk_size\": 4096, \"verbose\": True, } ) rag_node = RAGNode( input=\"user_prompt & (parsed_doc | doc)\", output=[\"relevant_chunks\"], node_config={ \"llm_model\": llm_model_instance, \"embedder_model\": embedder_model_instance, \"verbose\": True, } ) generate_answer_node = GenerateAnswerNode( input=\"user_prompt & (relevant_chunks | parsed_doc | doc)\", output=[\"answer\"], node_config={ \"llm_model\": llm_model_instance, \"verbose\": True, } ) # ************************************************ # Create the graph by defining the connections # ************************************************ graph = BaseGraph( nodes=[ robot_node, fetch_node, parse_node, rag_node, generate_answer_node, ], edges=[ (robot_node, fetch_node), (fetch_node, parse_node), (parse_node, rag_node), (rag_node, generate_answer_node) ], entry_point=robot_node ) # ************************************************ # Execute the graph # ************************************************ result, execution_info = graph.execute({ \"user_prompt\": \"Describe the content\", \"url\": \"https://example.com/\" }) # get the answer from the result result = result.get(\"answer\", \"No answer found.\") print(result)"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for creating script in azure in beautifolusoup?",
        "answer": "Basic example of scraping pipeline using ScriptCreatorGraph import os from dotenv import load_dotenv from scrapegraphai.graphs import ScriptCreatorGraph from langchain_openai import AzureChatOpenAI from langchain_openai import AzureOpenAIEmbeddings from scrapegraphai.utils import prettify_exec_info load_dotenv() # ************************************************ # Define the configuration for the graph # ************************************************ llm_model_instance = AzureChatOpenAI( openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"], azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"] ) embedder_model_instance = AzureOpenAIEmbeddings( azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"], openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"] ) graph_config = { \"llm\": {\"model_instance\": llm_model_instance}, \"embeddings\": {\"model_instance\": embedder_model_instance} } # ************************************************ # Create the ScriptCreatorGraph instance and run it # ************************************************ script_creator_graph = ScriptCreatorGraph( prompt=\"List me all the projects with their description.\", # also accepts a string with the already downloaded HTML code source=\"https://perinim.github.io/projects\", config=graph_config ) result = script_creator_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = script_creator_graph.get_execution_info() print(prettify_exec_info(graph_exec_info))"
    },
      {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple XMLS in azure ?",
        "answer": "Basic example of scraping pipeline using XMLScraperMultiGraph from XML documents\n\n```python\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import XMLScraperMultiGraph\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info\nload_dotenv()\n\n# ************************************************\n# Read the XML file\n# ************************************************\n\nFILE_NAME = \"inputs/books.xml\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\n# ************************************************\n# Create the XMLScraperMultiGraph instance and run it\n# ************************************************\n\nxml_scraper_graph = XMLScraperMultiGraph(\n    prompt=\"List me all the authors, title and genres of the books\",\n    source=[text, text],  # Pass the content of the file, not the file object\n    config=graph_config\n)\n\nresult = xml_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = xml_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n\n# Save to json or csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")\n```"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple CSVs in azure ?",
        "answer": "Basic example of scraping pipeline using CSVScraperMultiGraph from CSV documents\n\n```python\nimport os\nfrom dotenv import load_dotenv\nimport pandas as pd\nfrom scrapegraphai.graphs import CSVScraperMultiGraph\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info\n\nload_dotenv()\n# ************************************************\n# Read the CSV file\n# ************************************************\n\nFILE_NAME = \"inputs/username.csv\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\ntext = pd.read_csv(file_path)\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n# ************************************************\n# Create the CSVScraperMultiGraph instance and run it\n# ************************************************\n\ncsv_scraper_graph = CSVScraperMultiGraph(\n    prompt=\"List me all the last names\",\n    source=[str(text), str(text)],\n    config=graph_config\n)\n\nresult = csv_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = csv_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n\n# Save to json or csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")\n```"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple JSONs in azure ?",
        "answer": "Module for showing how JSONScraperMultiGraph multi works\n\n```python\nimport os\nimport json\nfrom langchain_openai import AzureChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom scrapegraphai.graphs import JSONScraperMultiGraph\n\nllm_model_instance = AzureChatOpenAI(\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"],\n    azure_deployment=os.environ[\"AZURE_OPENAI_CHAT_DEPLOYMENT_NAME\"]\n)\n\nembedder_model_instance = AzureOpenAIEmbeddings(\n    azure_deployment=os.environ[\"AZURE_OPENAI_EMBEDDINGS_DEPLOYMENT_NAME\"],\n    openai_api_version=os.environ[\"AZURE_OPENAI_API_VERSION\"]\n)\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\nFILE_NAME = \"inputs/example.json\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\nsources = [text, text]\n\nmultiple_search_graph = JSONScraperMultiGraph(\n    prompt= \"List me all the authors, title and genres of the books\",\n    source= sources,\n    schema=None,\n    config=graph_config\n)\n\nresult = multiple_search_graph.run()\nprint(json.dumps(result, indent=4))\n```"
    }
]
