[
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt using hugging face as a provider?",
        "answer": "\"\"\"\nBasic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\"\"\"\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SmartScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\nfrom langchain_community.llms import HuggingFaceEndpoint\nfrom langchain_community.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n# required environment variable in .env\n# HUGGINGFACEHUB_API_TOKEN\nload_dotenv()\n\nHUGGINGFACEHUB_API_TOKEN = os.getenv('HUGGINGFACEHUB_API_TOKEN')\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nrepo_id = \"mistralai/Mistral-7B-Instruct-v0.2\"\n\nllm_model_instance = HuggingFaceEndpoint(\n    repo_id=repo_id, max_length=128, temperature=0.5, token=HUGGINGFACEHUB_API_TOKEN\n)\n\nembedder_model_instance = HuggingFaceInferenceAPIEmbeddings(\n    api_key=HUGGINGFACEHUB_API_TOKEN, model_name=\"sentence-transformers/all-MiniLM-l6-v2\"\n)\n\n# ************************************************\n# Create the SmartScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsmart_scraper_graph = SmartScraperGraph(\n    prompt=\"List me all the events, with the following fields: company_name, event_name, event_start_date, event_start_time, event_end_date, event_end_time, location, event_mode, event_category, third_party_redirect, no_of_days, time_in_hours, hosted_or_attending, refreshments_type, registration_available, registration_link\",\n    source=\"https://www.hmhco.com/event\",\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and a schema using hugging face as a provider?",
        "answer": "\"\"\"\nBasic example of scraping pipeline using SmartScraper using Azure OpenAI Key\n\"\"\"\n\nimport os\nfrom dotenv import load_dotenv\nfrom scrapegraphai.graphs import SmartScraperGraph\nfrom scrapegraphai.utils import prettify_exec_info\nfrom langchain_community.llms import HuggingFaceEndpoint\nfrom langchain_community.embeddings import HuggingFaceInferenceAPIEmbeddings\n\n# ************************************************\n# Define the output schema for the graph\n# ************************************************\n\nschema = \"\"\"\n{\n    \"Projects\": [\n        {\n            \"title\": \"...\",\n            \"description\": \"...\"\n        },\n        {\n            \"title\": \"...\",\n            \"description\": \"...\"\n        }\n    ]\n}\n\"\"\"\n\n# required environment variable in .env\n# HUGGINGFACEHUB_API_TOKEN\nload_dotenv()\n\nHUGGINGFACEHUB_API_TOKEN = os.getenv('HUGGINGFACEHUB_API_TOKEN')\n\n# ************************************************\n# Initialize the model instances\n# ************************************************\n\nrepo_id = \"mistralai/Mistral-7B-Instruct-v0.2\"\n\nllm_model_instance = HuggingFaceEndpoint(\n    repo_id=repo_id, max_length=128, temperature=0.5, token=HUGGINGFACEHUB_API_TOKEN\n)\n\nembedder_model_instance = HuggingFaceInferenceAPIEmbeddings(\n    api_key=HUGGINGFACEHUB_API_TOKEN, model_name=\"sentence-transformers/all-MiniLM-l6-v2\"\n)\n\n# ************************************************\n# Create the SmartScraperGraph instance and run it\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\"model_instance\": llm_model_instance},\n    \"embeddings\": {\"model_instance\": embedder_model_instance}\n}\n\nsmart_scraper_graph = SmartScraperGraph(\n    prompt=\"List me all the projects with their description\",\n    source=\"https://perinim.github.io/projects/\",\n    schema=schema,\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    }
]
