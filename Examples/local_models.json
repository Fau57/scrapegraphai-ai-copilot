[
     {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using SmartScraper \"\"\" from scrapegraphai.graphs import SmartScraperGraph from scrapegraphai.utils import prettify_exec_info # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/mistral\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"verbose\": True, \"headless\": False } # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ smart_scraper_graph = SmartScraperGraph( prompt=\"List me all the titles\", # also accepts a string with the already downloaded HTML code source=\"https://www.wired.com/\", config=graph_config ) result = smart_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = smart_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and a schema using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using SmartScraper with schema \"\"\" import json from scrapegraphai.graphs import SmartScraperGraph from scrapegraphai.utils import prettify_exec_info # ************************************************ # Define the configuration for the graph # ************************************************ schema= \"\"\" { \"Projects\": [ { \"title\": \"...\", \"description\": \"...\", }, { \"title\": \"...\", \"description\": \"...\", } ] } \"\"\" graph_config = { \"llm\": { \"model\": \"ollama/mistral\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"verbose\": True, \"headless\": False } # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ smart_scraper_graph = SmartScraperGraph( prompt=\"List me all the projects with their description\", source=\"https://perinim.github.io/projects/\", schema=schema, config=graph_config ) result = smart_scraper_graph.run() print(json.dumps(result, indent=4))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a specific website given a prompt and searching on the internet using local models as a provider?",
        "answer": "\"\"\" Example of Search Graph \"\"\" from scrapegraphai.graphs import SearchGraph from scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/llama3\", \"temperature\": 0, # \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, # \"base_url\": \"http://localhost:11434\",  # set ollama URL arbitrarily }, \"max_results\": 5, \"verbose\": True, } # ************************************************ # Create the SearchGraph instance and run it # ************************************************ search_graph = SearchGraph( prompt=\"List me the best escursions near Trento\", config=graph_config ) result = search_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = search_graph.get_execution_info() print(prettify_exec_info(graph_exec_info)) # Save to json and csv convert_to_csv(result, \"result\") convert_to_json(result, \"result\")"

    },
   {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple websites given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using SmartScraper \"\"\" import os, json from dotenv import load_dotenv from scrapegraphai.graphs import SmartScraperMultiGraph load_dotenv() # ************************************************ # Define the configuration for the graph # ************************************************ openai_key = os.getenv(\"OPENAI_APIKEY\") graph_config = { \"llm\": { \"api_key\": openai_key, \"model\": \"gpt-4o\", }, \"verbose\": True, \"headless\": False, } # ******************************************************* # Create the SmartScraperMultiGraph instance and run it # ******************************************************* multiple_search_graph = SmartScraperMultiGraph( prompt=\"Who is Marco Perini?\", source=[ \"https://perinim.github.io/\", \"https://perinim.github.io/cv/\" ], schema=None, config=graph_config ) result = multiple_search_graph.run() print(json.dumps(result, indent=4))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping an XML given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using XMLScraperGraph from XML documents \"\"\" import os from dotenv import load_dotenv from scrapegraphai.graphs import XMLScraperGraph from scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info load_dotenv() # ************************************************ # Read the XML file # ************************************************ FILE_NAME = \"inputs/books.xml\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) with open(file_path, 'r', encoding=\"utf-8\") as file: text = file.read() # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/llama3\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"model_tokens\": 2000, # set context length arbitrarily \"base_url\": \"http://localhost:11434\", }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, \"base_url\": \"http://localhost:11434\", }, \"verbose\": True, } # ************************************************ # Create the XMLScraperGraph instance and run it # ************************************************ xml_scraper_graph = XMLScraperGraph( prompt=\"List me all the authors, title and genres of the books\", source=text,  # Pass the content of the file, not the file object config=graph_config ) result = xml_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = xml_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info)) # Save to json or csv convert_to_csv(result, \"result\") convert_to_json(result, \"result\")"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a JSON given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using JSONScraperGraph from JSON documents \"\"\" import os from dotenv import load_dotenv from scrapegraphai.graphs import JSONScraperGraph from scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info load_dotenv() # ************************************************ # Read the JSON file # ************************************************ FILE_NAME = \"inputs/example.json\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) with open(file_path, 'r', encoding=\"utf-8\") as file: text = file.read() # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/mistral\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"model_tokens\": 2000, # set context length arbitrarily \"base_url\": \"http://localhost:11434\", }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, \"base_url\": \"http://localhost:11434\", }, \"verbose\": True, } # ************************************************ # Create the JSONScraperGraph instance and run it # ************************************************ json_scraper_graph = JSONScraperGraph( prompt=\"List me all the authors, title and genres of the books\", source=text,  # Pass the content of the file, not the file object config=graph_config ) result = json_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = json_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info)) # Save to json or csv convert_to_csv(result, \"result\") convert_to_json(result, \"result\")"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping a CSV given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using CSVScraperGraph from CSV documents \"\"\" import os import pandas as pd from scrapegraphai.graphs import CSVScraperGraph from scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info # ************************************************ # Read the CSV file # ************************************************ FILE_NAME = \"inputs/username.csv\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) text = pd.read_csv(file_path) # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/llama3\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"model_tokens\": 2000, # set context length arbitrarily \"base_url\": \"http://localhost:11434\", }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, \"base_url\": \"http://localhost:11434\", }, \"verbose\": True, } # ************************************************ # Create the CSVScraperGraph instance and run it # ************************************************ csv_scraper_graph = CSVScraperGraph( prompt=\"List me all the last names\", source=str(text),  # Pass the content of the file, not the file object config=graph_config ) result = csv_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = csv_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info)) # Save to json or csv convert_to_csv(result, \"result\") convert_to_json(result, \"result\")"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping plain text given a prompt using local models as a provider?",
        "answer": "\"\"\" Basic example of scraping pipeline using SmartScraper from text \"\"\" import os from scrapegraphai.graphs import SmartScraperGraph from scrapegraphai.utils import prettify_exec_info # ************************************************ # Read the text file # ************************************************ FILE_NAME = \"inputs/plain_html_example.txt\" curr_dir = os.path.dirname(os.path.realpath(__file__)) file_path = os.path.join(curr_dir, FILE_NAME) # It could be also a http request using the request model with open(file_path, 'r', encoding=\"utf-8\") as file: text = file.read() # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/mistral\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"model_tokens\": 2000, # set context length arbitrarily \"base_url\": \"http://localhost:11434\", }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, \"base_url\": \"http://localhost:11434\", }, \"verbose\": True, } # ************************************************ # Create the SmartScraperGraph instance and run it # ************************************************ smart_scraper_graph = SmartScraperGraph( prompt=\"List me all the projects\", source=text, config=graph_config ) result = smart_scraper_graph.run() print(result) # ************************************************ # Get graph execution info # ************************************************ graph_exec_info = smart_scraper_graph.get_execution_info() print(prettify_exec_info(graph_exec_info))"
    },
   {
        "prompt": "How to create a script in Scrapegraphai for scraping a PDF given a prompt using local models as a provider?",
        "answer": "\"\"\" Module for showing how PDFScraper works \"\"\" from scrapegraphai.graphs import PDFScraperGraph graph_config = { \"llm\": { \"model\": \"ollama/llama3\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly \"model_tokens\": 4000, }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, }, \"verbose\": True, \"headless\": False, } # Covert to list sources = [ \"This paper provides evidence from a natural experiment on the relationship between positive affect and productivity. We link highly detailed administrative data on the behaviors and performance of all telesales workers at a large telecommunications company with survey reports of employee happiness that we collected on a weekly basis. We use variation in worker mood arising from visual exposure to weatherâ€”the interaction between call center architecture and outdoor weather conditionsâ€”in order to provide a quasi-experimental test of the effect of happiness on productivity. We find evidence of a positive impact on sales performance, which is driven by changes in labor productivity â€“ largely through workers converting more calls into sales, and to a lesser extent by making more calls per hour and adhering more closely to their schedule. We find no evidence in our setting of effects on measures of high-frequency labor supply such as attendance and break-taking.\", # Add more sources here ] prompt = \"\"\" You are an expert in reviewing academic manuscripts. Please analyze the abstracts provided from an academic journal article to extract and clearly identify the following elements: Independent Variable (IV): The variable that is manipulated or considered as the primary cause affecting other variables. Dependent Variable (DV): The variable that is measured or observed, which is expected to change as a result of variations in the Independent Variable. Exogenous Shock: Identify any external or unexpected events used in the study that serve as a natural experiment or provide a unique setting for observing the effects on the IV and DV. Response Format: For each abstract, present your response in the following structured format: Independent Variable (IV): Dependent Variable (DV): Exogenous Shock: Example Queries and Responses: Query: This paper provides evidence from a natural experiment on the relationship between positive affect and productivity. We link highly detailed administrative data on the behaviors and performance of all telesales workers at a large telecommunications company with survey reports of employee happiness that we collected on a weekly basis. We use variation in worker mood arising from visual exposure to weather the interaction between call center architecture and outdoor weather conditions in order to provide a quasi-experimental test of the effect of happiness on productivity. We find evidence of a positive impact on sales performance, which is driven by changes in labor productivity largely through workers converting more calls into sales, and to a lesser extent by making more calls per hour and adhering more closely to their schedule. We find no evidence in our setting of effects on measures of high-frequency labor supply such as attendance and break-taking. Response: Independent Variable (IV): Employee happiness. Dependent Variable (DV): Overall firm productivity. Exogenous Shock: Sudden company-wide increase in bonus payments. Query: The diffusion of social media coincided with a worsening of mental health conditions among adolescents and young adults in the United States, giving rise to speculation that social media might be detrimental to mental health. In this paper, we provide quasi-experimental estimates of the impact of social media on mental health by leveraging a unique natural experiment: the staggered introduction of Facebook across U.S. colleges. Our analysis couples data on student mental health around the years of Facebook's expansion with a generalized difference-in-differences empirical strategy. We find that the roll-out of Facebook at a college increased symptoms of poor mental health, especially depression. We also find that, among students predicted to be most susceptible to mental illness, the introduction of Facebook led to increased utilization of mental healthcare services. Lastly, we find that, after the introduction of Facebook, students were more likely to report experiencing impairments to academic performance resulting from poor mental health. Additional evidence on mechanisms suggests that the results are due to Facebook fostering unfavorable social comparisons. Response: Independent Variable (IV): Exposure to social media. Dependent Variable (DV): Mental health outcomes. Exogenous Shock: staggered introduction of Facebook across U.S. colleges. \"\"\" results = [] for source in sources: pdf_scraper_graph = PDFScraperGraph( prompt=prompt, source=source, config=graph_config ) result = pdf_scraper_graph.run() results.append(result) print(results)"
    },
    {
        "prompt": "Example of custom graph using existing nodes",
        "answer": "\"\"\" Example of custom graph using existing nodes \"\"\" import os from langchain_openai import OpenAIEmbeddings from scrapegraphai.models import OpenAI from scrapegraphai.graphs import BaseGraph from scrapegraphai.nodes import FetchNode, ParseNode, RAGNode, GenerateAnswerNode, RobotsNode # ************************************************ # Define the configuration for the graph # ************************************************ graph_config = { \"llm\": { \"model\": \"ollama/mistral\", \"temperature\": 0, \"format\": \"json\",  # Ollama needs the format to be specified explicitly # \"model_tokens\": 2000, # set context length arbitrarily \"base_url\": \"http://localhost:11434\", }, \"embeddings\": { \"model\": \"ollama/nomic-embed-text\", \"temperature\": 0, \"base_url\": \"http://localhost:11434\", }, \"verbose\": True, } # ************************************************ # Define the graph nodes # ************************************************ llm_model = OpenAI(graph_config[\"llm\"]) embedder = OpenAIEmbeddings(api_key=llm_model.openai_api_key) # define the nodes for the graph robot_node = RobotsNode( input=\"url\", output=[\"is_scrapable\"], node_config={ \"llm_model\": llm_model, \"force_scraping\": True, \"verbose\": True, } ) fetch_node = FetchNode( input=\"url | local_dir\", output=[\"doc\", \"link_urls\", \"img_urls\"], node_config={ \"verbose\": True, \"headless\": True, } ) parse_node = ParseNode( input=\"doc\", output=[\"parsed_doc\"], node_config={ \"chunk_size\": 4096, \"verbose\": True, } ) rag_node = RAGNode( input=\"user_prompt & (parsed_doc | doc)\", output=[\"relevant_chunks\"], node_config={ \"llm_model\": llm_model, \"embedder_model\": embedder, \"verbose\": True, } ) generate_answer_node = GenerateAnswerNode( input=\"user_prompt & (relevant_chunks | parsed_doc | doc)\", output=[\"answer\"], node_config={ \"llm_model\": llm_model, \"verbose\": True, } ) # ************************************************ # Create the graph by defining the connections # ************************************************ graph = BaseGraph( nodes=[ robot_node, fetch_node, parse_node, rag_node, generate_answer_node, ], edges=[ (robot_node, fetch_node), (fetch_node, parse_node), (parse_node, rag_node), (rag_node, generate_answer_node) ], entry_point=robot_node ) # ************************************************ # Execute the graph # ************************************************ result, execution_info = graph.execute({ \"user_prompt\": \"Describe the content\", \"url\": \"https://example.com/\" }) # get the answer from the result result = result.get(\"answer\", \"No answer found.\") print(result)"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for creating script in ollama?",
        "answer": "Basic example of scraping pipeline using ScriptCreatorGraph\n\nfrom scrapegraphai.graphs import ScriptCreatorGraph\nfrom scrapegraphai.utils import prettify_exec_info\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"ollama/mistral\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\"  # set ollama URL arbitrarily\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\"  # set ollama URL arbitrarily\n    },\n    \"library\": \"beautifulsoup\",\n    \"verbose\": True\n}\n\n# ************************************************\n# Create the ScriptCreatorGraph instance and run it\n# ************************************************\n\nsmart_scraper_graph = ScriptCreatorGraph(\n    prompt=\"List me all the news with their description.\",\n    # also accepts a string with the already downloaded HTML code\n    source=\"https://perinim.github.io/projects\",\n    config=graph_config\n)\n\nresult = smart_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = smart_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple XMLS in ollama?",
        "answer": "Basic example of scraping pipeline using XMLScraperMultiGraph from XML documents\n\n```python\nimport os\nfrom scrapegraphai.graphs import XMLScraperMultiGraph\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info\n\n# ************************************************\n# Read the XML file\n# ************************************************\n\nFILE_NAME = \"inputs/books.xml\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"ollama/llama3\",\n        \"temperature\": 0,\n        \"format\": \"json\",  # Ollama needs the format to be specified explicitly\n        # \"model_tokens\": 2000, # set context length arbitrarily\n        \"base_url\": \"http://localhost:11434\",\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\",\n    },\n    \"verbose\": True,\n}\n\n# ************************************************\n# Create the XMLScraperMultiGraph instance and run it\n# ************************************************\n\nxml_scraper_graph = XMLScraperMultiGraph(\n    prompt=\"List me all the authors, title and genres of the books\",\n    source=[text, text],  # Pass the content of the file, not the file object\n    config=graph_config\n)\n\nresult = xml_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = xml_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n\n# Save to json or csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")\n```\n"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple CSVs in ollama?",
        "answer": "Basic example of scraping pipeline using CSVScraperMultiGraph from CSV documents\n\n```python\nimport os\nimport pandas as pd\nfrom scrapegraphai.graphs import CSVScraperMultiGraph\nfrom scrapegraphai.utils import convert_to_csv, convert_to_json, prettify_exec_info\n\n# ************************************************\n# Read the CSV file\n# ************************************************\n\nFILE_NAME = \"inputs/username.csv\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\ntext = pd.read_csv(file_path)\n\n# ************************************************\n# Define the configuration for the graph\n# ************************************************\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"ollama/llama3\",\n        \"temperature\": 0,\n        \"format\": \"json\",  # Ollama needs the format to be specified explicitly\n        # \"model_tokens\": 2000, # set context length arbitrarily\n        \"base_url\": \"http://localhost:11434\",\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n        \"base_url\": \"http://localhost:11434\",\n    },\n    \"verbose\": True,\n}\n\n# ************************************************\n# Create the CSVScraperMultiGraph instance and run it\n# ************************************************\n\ncsv_scraper_graph = CSVScraperMultiGraph(\n    prompt=\"List me all the last names\",\n    source=[str(text), str(text)],\n    config=graph_config\n)\n\nresult = csv_scraper_graph.run()\nprint(result)\n\n# ************************************************\n# Get graph execution info\n# ************************************************\n\ngraph_exec_info = csv_scraper_graph.get_execution_info()\nprint(prettify_exec_info(graph_exec_info))\n\n# Save to json or csv\nconvert_to_csv(result, \"result\")\nconvert_to_json(result, \"result\")\n```\n"
    },
    {
        "prompt": "How to create a script in Scrapegraphai for scraping multiple JSONs in ollama?",
        "answer": "Module for showing how JSONScraperMultiGraph multi works\n\n```python\nimport os\nimport json\nfrom scrapegraphai.graphs import JSONScraperMultiGraph\n\ngraph_config = {\n    \"llm\": {\n        \"model\": \"ollama/llama3\",\n        \"temperature\": 0,\n        \"format\": \"json\",  # Ollama needs the format to be specified explicitly\n        \"model_tokens\": 4000,\n    },\n    \"embeddings\": {\n        \"model\": \"ollama/nomic-embed-text\",\n        \"temperature\": 0,\n    },\n    \"verbose\": True,\n    \"headless\": False,\n}\nFILE_NAME = \"inputs/example.json\"\ncurr_dir = os.path.dirname(os.path.realpath(__file__))\nfile_path = os.path.join(curr_dir, FILE_NAME)\n\nwith open(file_path, 'r', encoding=\"utf-8\") as file:\n    text = file.read()\n\nsources = [text, text]\n\nmultiple_search_graph = JSONScraperMultiGraph(\n    prompt=\"List me all the authors, title and genres of the books\",\n    source=sources,\n    schema=None,\n    config=graph_config\n)\n\nresult = multiple_search_graph.run()\nprint(json.dumps(result, indent=4))\n```\n"
    }
]
