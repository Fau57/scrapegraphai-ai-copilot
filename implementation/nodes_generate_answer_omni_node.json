[
    {
        "prompt": "how is generate_answer_omni_node implemented in Scrapegraphai?",
        "answer": "\"\"\"\nGenerateAnswerNode Module\n\"\"\"\n\n# Imports from standard library\nfrom typing import List, Optional\n\n# Imports from Langchain\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom langchain_core.runnables import RunnableParallel\nfrom tqdm import tqdm\n\n# Imports from the library\nfrom .base_node import BaseNode\nfrom ..helpers.generate_answer_node_omni_prompts import template_no_chunk_omni, template_chunks_omni, template_merge_omni\n\n\nclass GenerateAnswerOmniNode(BaseNode):\n    \"\"\"\n    A node that generates an answer using a large language model (LLM) based on the user's input\n    and the content extracted from a webpage. It constructs a prompt from the user's input\n    and the scraped content, feeds it to the LLM, and parses the LLM's response to produce\n    an answer.\n\n    Attributes:\n        llm_model: An instance of a language model client, configured for generating answers.\n        verbose (bool): A flag indicating whether to show print statements during execution.\n\n    Args:\n        input (str): Boolean expression defining the input keys needed from the state.\n        output (List[str]): List of output keys to be updated in the state.\n        node_config (dict): Additional configuration for the node.\n        node_name (str): The unique identifier name for the node, defaulting to \"GenerateAnswer\".\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        output: List[str],\n        node_config: Optional[dict] = None,\n        node_name: str = \"GenerateAnswerOmni\",\n    ):\n        super().__init__(node_name, \"node\", input, output, 3, node_config)\n\n        self.llm_model = node_config[\"llm_model\"]\n        self.verbose = (\n            False if node_config is None else node_config.get(\"verbose\", False)\n        )\n\n    def execute(self, state: dict) -> dict:\n        \"\"\"\n        Generates an answer by constructing a prompt from the user's input and the scraped\n        content, querying the language model, and parsing its response.\n\n        Args:\n            state (dict): The current state of the graph. The input keys will be used\n                            to fetch the correct data from the state.\n\n        Returns:\n            dict: The updated state with the output key containing the generated answer.\n\n        Raises:\n            KeyError: If the input keys are not found in the state, indicating\n                      that the necessary information for generating an answer is missing.\n        \"\"\"\n\n        self.logger.info(f\"--- Executing {self.node_name} Node ---\")\n\n        # Interpret input keys based on the provided input expression\n        input_keys = self.get_input_keys(state)\n\n        # Fetching data from the state based on the input keys\n        input_data = [state[key] for key in input_keys]\n\n        user_prompt = input_data[0]\n        doc = input_data[1]\n        imag_desc = input_data[2]\n\n        output_parser = JsonOutputParser()\n        format_instructions = output_parser.get_format_instructions()\n\n\n        chains_dict = {}\n\n        # Use tqdm to add progress bar\n        for i, chunk in enumerate(\n            tqdm(doc, desc=\"Processing chunks\", disable=not self.verbose)\n        ):\n            if len(doc) == 1:\n                prompt = PromptTemplate(\n                    template=template_no_chunk_omni,\n                    input_variables=[\"question\"],\n                    partial_variables={\n                        \"context\": chunk.page_content,\n                        \"format_instructions\": format_instructions,\n                        \"img_desc\": imag_desc,\n                    },\n                )\n            else:\n                prompt = PromptTemplate(\n                    template=template_chunks_omni,\n                    input_variables=[\"question\"],\n                    partial_variables={\n                        \"context\": chunk.page_content,\n                        \"chunk_id\": i + 1,\n                        \"format_instructions\": format_instructions,\n                    },\n                )\n\n            # Dynamically name the chains based on their index\n            chain_name = f\"chunk{i+1}\"\n            chains_dict[chain_name] = prompt | self.llm_model | output_parser\n\n        if len(chains_dict) > 1:\n            # Use dictionary unpacking to pass the dynamically named chains to RunnableParallel\n            map_chain = RunnableParallel(**chains_dict)\n            # Chain\n            answer = map_chain.invoke({\"question\": user_prompt})\n            # Merge the answers from the chunks\n            merge_prompt = PromptTemplate(\n                template=template_merge_omni,\n                input_variables=[\"context\", \"question\"],\n                partial_variables={\n                    \"format_instructions\": format_instructions,\n                    \"img_desc\": imag_desc,\n                },\n            )\n            merge_chain = merge_prompt | self.llm_model | output_parser\n            answer = merge_chain.invoke({\"context\": answer, \"question\": user_prompt})\n        else:\n            # Chain\n            single_chain = list(chains_dict.values())[0]\n            answer = single_chain.invoke({\"question\": user_prompt})\n\n        # Update the state with the generated answer\n        state.update({self.output[0]: answer})\n        return state\n"
    }
]