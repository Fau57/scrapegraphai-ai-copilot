[
    {
        "prompt": "how is generate_answer_csv_node implemented in Scrapegraphai?",
        "answer": "\"\"\"\ngg\nModule for generating the answer node\n\"\"\"\n\n# Imports from standard library\nfrom typing import List, Optional\n\n# Imports from Langchain\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom langchain_core.runnables import RunnableParallel\nfrom tqdm import tqdm\n\nfrom ..utils.logging import get_logger\n\n# Imports from the library\nfrom .base_node import BaseNode\nfrom ..helpers.generate_answer_node_csv_prompts import template_chunks_csv, template_no_chunks_csv, template_merge_csv\n\n\nclass GenerateAnswerCSVNode(BaseNode):\n    \"\"\"\n    A node that generates an answer using a language model (LLM) based on the user's input\n    and the content extracted from a webpage. It constructs a prompt from the user's input\n    and the scraped content, feeds it to the LLM, and parses the LLM's response to produce\n    an answer.\n\n    Attributes:\n        llm_model: An instance of a language model client, configured for generating answers.\n        node_name (str): The unique identifier name for the node, defaulting\n        to \"GenerateAnswerNodeCsv\".\n        node_type (str): The type of the node, set to \"node\" indicating a\n        standard operational node.\n\n    Args:\n        llm_model: An instance of the language model client (e.g., ChatOpenAI) used\n        for generating answers.\n        node_name (str, optional): The unique identifier name for the node.\n        Defaults to \"GenerateAnswerNodeCsv\".\n\n    Methods:\n        execute(state): Processes the input and document from the state to generate an answer,\n                        updating the state with the generated answer under the 'answer' key.\n    \"\"\"\n\n    def __init__(\n        self,\n        input: str,\n        output: List[str],\n        node_config: Optional[dict] = None,\n        node_name: str = \"GenerateAnswer\",\n    ):\n        \"\"\"\n        Initializes the GenerateAnswerNodeCsv with a language model client and a node name.\n        Args:\n            llm_model: An instance of the OpenAIImageToText class.\n            node_name (str): name of the node\n        \"\"\"\n        super().__init__(node_name, \"node\", input, output, 2, node_config)\n        self.llm_model = node_config[\"llm_model\"]\n        self.verbose = (\n            False if node_config is None else node_config.get(\"verbose\", False)\n        )\n\n    def execute(self, state):\n        \"\"\"\n        Generates an answer by constructing a prompt from the user's input and the scraped\n        content, querying the language model, and parsing its response.\n\n        The method updates the state with the generated answer under the 'answer' key.\n\n        Args:\n            state (dict): The current state of the graph, expected to contain 'user_input',\n                          and optionally 'parsed_document' or 'relevant_chunks' within 'keys'.\n\n        Returns:\n            dict: The updated state with the 'answer' key containing the generated answer.\n\n        Raises:\n            KeyError: If 'user_input' or 'document' is not found in the state, indicating\n                      that the necessary information for generating an answer is missing.\n        \"\"\"\n\n        self.logger.info(f\"--- Executing {self.node_name} Node ---\")\n\n        # Interpret input keys based on the provided input expression\n        input_keys = self.get_input_keys(state)\n\n        # Fetching data from the state based on the input keys\n        input_data = [state[key] for key in input_keys]\n\n        user_prompt = input_data[0]\n        doc = input_data[1]\n\n        output_parser = JsonOutputParser()\n        format_instructions = output_parser.get_format_instructions()\n   \n        chains_dict = {}\n\n        # Use tqdm to add progress bar\n        for i, chunk in enumerate(\n            tqdm(doc, desc=\"Processing chunks\", disable=not self.verbose)\n        ):\n            if len(doc) == 1:\n                prompt = PromptTemplate(\n                    template=template_no_chunks_csv,\n                    input_variables=[\"question\"],\n                    partial_variables={\n                        \"context\": chunk.page_content,\n                        \"format_instructions\": format_instructions,\n                    },\n                )\n            else:\n                prompt = PromptTemplate(\n                    template=template_chunks_csv,\n                    input_variables=[\"question\"],\n                    partial_variables={\n                        \"context\": chunk.page_content,\n                        \"chunk_id\": i + 1,\n                        \"format_instructions\": format_instructions,\n                    },\n                )\n\n            # Dynamically name the chains based on their index\n            chain_name = f\"chunk{i+1}\"\n            chains_dict[chain_name] = prompt | self.llm_model | output_parser\n\n        if len(chains_dict) > 1:\n            # Use dictionary unpacking to pass the dynamically named chains to RunnableParallel\n            map_chain = RunnableParallel(**chains_dict)\n            # Chain\n            answer = map_chain.invoke({\"question\": user_prompt})\n            # Merge the answers from the chunks\n            merge_prompt = PromptTemplate(\n                template=template_merge_csv,\n                input_variables=[\"context\", \"question\"],\n                partial_variables={\"format_instructions\": format_instructions},\n            )\n            merge_chain = merge_prompt | self.llm_model | output_parser\n            answer = merge_chain.invoke({\"context\": answer, \"question\": user_prompt})\n        else:\n            # Chain\n            single_chain = list(chains_dict.values())[0]\n            answer = single_chain.invoke({\"question\": user_prompt})\n\n        # Update the state with the generated answer\n        state.update({self.output[0]: answer})\n        return state\n"
    }
]