[
    {
        "prompt": "how is research_web implemented in Scrapegraphai?",
        "answer": "\"\"\"\nModule for making the request on the web\n\"\"\"\nimport re\nfrom typing import List\nfrom langchain_community.tools import DuckDuckGoSearchResults\nfrom googlesearch import search as google_search\n\n\ndef search_on_web(query: str, search_engine: str = \"Google\", max_results: int = 10) -> List[str]:\n    \"\"\"\n    Searches the web for a given query using specified search engine options.\n\n    Args:\n        query (str): The search query to find on the internet.\n        search_engine (str, optional): Specifies the search engine to use, options include 'Google' or 'DuckDuckGo'. Default is 'Google'.\n        max_results (int, optional): The maximum number of search results to return.\n\n    Returns:\n        List[str]: A list of URLs as strings that are the search results.\n\n    Raises:\n        ValueError: If the search engine specified is neither 'Google' nor 'DuckDuckGo'.\n\n    Example:\n        >>> search_on_web(\"example query\", search_engine=\"Google\", max_results=5)\n        ['http://example.com', 'http://example.org', ...]\n\n    This function allows switching between Google and DuckDuckGo to perform internet searches, returning a list of result URLs.\n    \"\"\"\n\n    if search_engine.lower() == \"google\":\n        res = []\n\n        for url in google_search(query, stop=max_results):\n            res.append(url)\n        return res\n    elif search_engine.lower() == \"duckduckgo\":\n        research = DuckDuckGoSearchResults(max_results=max_results)\n        res = research.run(query)\n\n        links = re.findall(r'https?://[^\\s,\\]]+', res)\n\n        return links\n    raise ValueError(\n        \"The only search engines available are DuckDuckGo or Google\")\n"
    }
]