[
    {
        "prompt": "how is convert_to_csv implemented in Scrapegraphai?",
        "answer": "\"\"\"\nModule that given a filename and a position saves the file in the csv format\n\"\"\"\nimport os\nimport sys\nimport pandas as pd\n\n\ndef convert_to_csv(data: dict, filename: str, position: str = None) -> None:\n    \"\"\"\n    Converts a dictionary to a CSV file and saves it at a specified location.\n\n    Args:\n        data (dict): The data to be converted into CSV format.\n        filename (str): The name of the output CSV file, without the '.csv' extension.\n        position (str, optional): The file path where the CSV should be saved. Defaults to the directory of the caller script if not provided.\n\n    Returns:\n        None: The function does not return anything.\n        \n    Raises:\n        FileNotFoundError: If the specified directory does not exist.\n        PermissionError: If write permissions are lacking for the directory.\n        TypeError: If `data` is not a dictionary.\n        Exception: For other issues that may arise during the creation or saving of the CSV file.\n\n    Example:\n        >>> convert_to_csv({'id': [1, 2], 'value': [10, 20]}, 'output', '/path/to/save')\n        Saves a CSV file named 'output.csv' at '/path/to/save'.\n    \"\"\"\n\n    if \".csv\" in filename:\n        filename = filename.replace(\".csv\", \"\")  # Remove .csv extension\n\n    # Get the directory of the caller script if position is not provided\n    if position is None:\n        caller_dir = os.path.dirname(os.path.abspath(sys.argv[0]))\n        position = caller_dir\n\n    try:\n        if not isinstance(data, dict):\n            raise TypeError(\"Input data must be a dictionary\")\n\n        os.makedirs(position, exist_ok=True)  # Create directory if needed\n\n        df = pd.DataFrame.from_dict(data, orient='index')\n        df.to_csv(os.path.join(position, f\"{filename}.csv\"), index=False)\n\n    except FileNotFoundError as fnfe:\n        raise FileNotFoundError(\n            f\"The specified directory '{position}' does not exist.\") from fnfe\n    except PermissionError as pe:\n        raise PermissionError(\n            f\"You don't have permission to write to '{position}'.\") from pe\n    except Exception as e:\n        raise e  # Re-raise other potential errors\n"
    }
]